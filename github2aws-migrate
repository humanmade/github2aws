#!/usr/bin/env node

var program = require('commander')
  , colors = require('colors')
  , uuid = require('node-uuid')
  , fs = require('fs')
  , AWS = require('aws-sdk')
  , Q = require('q')
  , path = require('path')
  , local = path.join.bind(path, __dirname)
  , co = require('co')
  , prompt = require('co-prompt')
  , ora = require('ora')
  , shell = require('shelljs');

var codecommitData = null;
var githubPassphrase = null;

var errorCollection = [];

var spinner = ora();

program
  .usage('migrate [options] <repo-url> [repo-description]')
  .description('migrate GitHub repo to AWS CodeCommit')
  .arguments('<repo-url> [repo-description]')
  .option('-p,--public-key <public-key>', 'public key path for GitHub access')
  .option('-k,--private-key <private-key>', 'private key path for GitHub access')
  .action(function(repoUrl, repoDescription) {
    var repoParts = repoUrl.split('/');
    var repoSubParts = repoParts[1].split('.');
    repoSubParts = repoSubParts.slice(0,repoSubParts.length - 1);
    var repo = repoSubParts.join('.');
    var migrationId = uuid.v4();
    var codecommit = new AWS.CodeCommit({region:'us-east-1'});

    console.log();
    console.log('Migrating: ' + colors.green.bold(repo));
    if ( repoDescription ) {
      console.log( 'Description: "%s"', colors.green(repoDescription) );
    }
    console.log();

    repoParams = {};
    repoParams.repositoryName = repo;
    if ( repoDescription ) {
      repoParams.repositoryDescription = repoDescription;
    }

    co(function *() {
      console.log('Begin:');
    })
    .then(function() {
      var deferred = Q.defer();

      spinner.text = 'Creating CodeCommit repository...';
      spinner.start();
      codecommit.createRepository( repoParams, function(err, data) {
        spinner.stop();
        codecommitData = data;
        if ( err ) {
          console.error( '  Repository: %s.', colors.red('Failed') );
          deferred.reject( err );
        } else {
          console.log( '  Repository: %s.', colors.green('Created') );

          spinner.text = 'Cloning GitHub repository...';
          spinner.start();

          var gitExec = shell.exec('git clone --quiet --mirror ' + repoUrl + ' ./' + migrationId, { async: true } );
          var gitOutput = [];
          var gitError = [];
          gitExec.stdout.on('data', function(data) {
            gitOutput.push(data);
          });
          gitExec.stderr.on('data', function(data) {
            gitError.push(data);
          });
          gitExec.on('close', function(code) {
            if ( code > 0 ) {
              spinner.stop();
              console.log('  Clone: %s [%s]', colors.red('Failed'), colors.red.bold(code));
              deferred.reject(code);
            } else {
              spinner.stop();
              console.log('  Clone: %s [%s]', colors.green('Successful'), migrationId);
              deferred.resolve(codecommitData);
            }
          });
        }
      } );

      return deferred.promise;
    })
    .then(function(data) {

      //console.log(codecommitData);
      //console.log(migrationId);
    })
    .then(function () {
      console.log('Done.');
      process.exit();
    });
  })
  .on('--help', function() {
    console.log('  Examples:');
    console.log();
    console.log('    $ ./github2aws migrate git@github.com:yourusername/your-repo-name.git');
    console.log();
  });

program.parse(process.argv);

if ( ! program.args.length ) {
  program.help();
}
